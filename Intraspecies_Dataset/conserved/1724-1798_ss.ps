%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon May  4 01:45:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
uguccgugauccacagacacuugagauucuugacauuacaccauguucuuuugguggugucaguguuauaacacc\
) } def
/len { sequence length } bind def

/coor [
[97.82669830 111.83507538]
[86.79084015 121.99429321]
[75.75498199 132.15351868]
[64.71912384 142.31274414]
[59.80633926 157.35186768]
[45.20224762 160.27929688]
[34.16638947 170.43852234]
[23.13053131 180.59773254]
[15.57237720 195.77372742]
[-1.10283375 192.71208191]
[-2.77699518 175.84100342]
[12.97130775 169.56187439]
[24.00716591 159.40266418]
[35.04302597 149.24343872]
[39.16645050 134.93096924]
[54.55989838 131.27688599]
[65.59575653 121.11766052]
[76.63161469 110.95843506]
[87.66747284 100.79921722]
[73.03202057 104.08606720]
[58.47593689 100.46384430]
[47.08781052 90.70112610]
[41.28403091 76.86942291]
[42.29607010 61.90359879]
[49.90918732 48.97918701]
[62.50799561 40.83854675]
[77.41921997 39.20900345]
[91.47891998 44.43631363]
[101.70384216 55.41132736]
[105.92441559 69.80531311]
[103.24517059 84.56390381]
[112.93965912 73.11763763]
[122.63414764 61.67137909]
[132.32864380 50.22511673]
[142.02313232 38.77885818]
[151.71762085 27.33259583]
[153.37867737 20.44351578]
[157.74842834 16.25425529]
[162.71649170 15.38462448]
[173.32310486 4.77802229]
[183.92970276 -5.82857943]
[194.53630066 -16.43518066]
[205.14289856 -27.04178238]
[202.58258057 -42.34617233]
[209.53704834 -56.21754837]
[223.33216858 -63.32208252]
[238.66342163 -60.92793274]
[249.63565063 -49.95570374]
[252.02980042 -34.62443924]
[244.92527771 -20.82932472]
[231.05389404 -13.87485981]
[215.74951172 -16.43518066]
[205.14289856 -5.82857943]
[194.53630066 4.77802229]
[183.92970276 15.38462448]
[173.32310486 25.99122620]
[163.16387939 37.02708435]
[153.46939087 48.47334671]
[143.77490234 59.91960526]
[134.08041382 71.36586761]
[124.38592529 82.81212616]
[114.69143677 94.25839233]
[114.07155609 109.24557495]
[122.78771210 121.45330811]
[131.50386047 133.66104126]
[140.22001648 145.86877441]
[155.36175537 152.16636658]
[157.21014404 168.46101379]
[143.86372375 177.99017334]
[129.05213928 170.95106506]
[128.01228333 154.58491516]
[119.29613495 142.37719727]
[110.57997894 130.16946411]
[101.86383057 117.96173096]
[100.13473511 116.04920197]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 19]
[2 18]
[3 17]
[4 16]
[6 14]
[7 13]
[8 12]
[31 62]
[32 61]
[33 60]
[34 59]
[35 58]
[36 57]
[39 56]
[40 55]
[41 54]
[42 53]
[43 52]
[63 74]
[64 73]
[65 72]
[66 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
