%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon May  4 01:45:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
uaauuugguuaaaaacaaaugugucaauuucaacuucaaugguuuaacaggcacagguguucuua\
) } def
/len { sequence length } bind def

/coor [
[37.86383820 339.74917603]
[24.69421768 347.19338989]
[9.86837292 350.20162964]
[-5.16121006 348.47918701]
[-18.92208672 342.19479370]
[-30.06610680 331.96417236]
[-37.50149155 318.78955078]
[-40.49980164 303.96170044]
[-38.76728439 288.93325806]
[-32.47368622 275.17660522]
[-22.23557854 264.03945923]
[-9.05599403 256.61288452]
[5.77386856 253.62451172]
[20.80113029 255.36709595]
[27.03235435 241.72262573]
[33.26358032 228.07814026]
[39.49480438 214.43365479]
[34.06526184 200.61137390]
[40.19023895 186.68516541]
[54.72513962 181.08387756]
[60.95636749 167.43939209]
[67.18759155 153.79492188]
[73.41881561 140.15043640]
[79.65003967 126.50595856]
[85.88126373 112.86148071]
[80.91616821 99.24920654]
[86.93533325 86.06906891]
[100.47425079 80.90729523]
[106.70547485 67.26281738]
[102.91693115 54.69060898]
[108.66572571 43.33824539]
[120.27766418 39.22382736]
[127.15106201 25.89129448]
[134.02445984 12.55876255]
[140.89785767 -0.77376956]
[137.40222168 -16.43135834]
[147.57614136 -28.83582878]
[163.61505127 -28.47153473]
[173.21528625 -15.61793137]
[169.01235962 -0.13520135]
[154.23039246 6.09962845]
[147.35699463 19.43215942]
[140.48359680 32.76469040]
[133.61019897 46.09722519]
[135.53857422 63.38373184]
[120.34996033 73.49404144]
[114.11873627 87.13851929]
[119.08383179 100.75079346]
[113.06466675 113.93093109]
[99.52574921 119.09270477]
[93.29452515 132.73718262]
[87.06329346 146.38166809]
[80.83206940 160.02613831]
[74.60084534 173.67062378]
[68.36962128 187.31510925]
[73.65478516 201.96791077]
[67.14106750 215.71658325]
[53.13928604 220.66488647]
[46.90806198 234.30937195]
[40.67683411 247.95384216]
[34.44561005 261.59832764]
[45.60332870 271.81402588]
[53.05636597 284.97863770]
[56.07453918 299.80249023]
[54.36216736 314.83322144]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 61]
[15 60]
[16 59]
[17 58]
[20 55]
[21 54]
[22 53]
[23 52]
[24 51]
[25 50]
[28 47]
[29 46]
[32 44]
[33 43]
[34 42]
[35 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
