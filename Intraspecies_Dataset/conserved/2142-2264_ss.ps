%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon May  4 01:45:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
cccacaaauuuuacuauuaguguuaccacagaaauucuaccagugucuaugaccaagacaucaguagauuguacaauguacauuuguggugauucaacugaaugcagcaaucuuuuguugcaa\
) } def
/len { sequence length } bind def

/coor [
[155.34826660 400.95227051]
[143.27110291 409.84844971]
[129.07316589 414.68774414]
[114.07683563 415.01937866]
[99.67884827 410.81246948]
[87.22023010 402.45886230]
[77.86135101 390.73660278]
[72.47389984 376.73748779]
[71.55965424 361.76538086]
[75.20376587 347.21475220]
[83.06682587 334.44085693]
[94.41648102 324.63345337]
[108.19562531 318.70596313]
[123.12089539 317.21051025]
[137.80215454 320.28631592]
[150.87200928 327.64697266]
[161.11355591 338.60748291]
[158.84214783 323.78045654]
[156.57072449 308.95343018]
[154.29931641 294.12640381]
[152.02789307 279.29937744]
[149.19477844 264.56936646]
[145.80406189 249.95762634]
[142.41334534 235.34588623]
[139.02261353 220.73414612]
[135.63189697 206.12240601]
[132.24118042 191.51066589]
[128.85044861 176.89892578]
[125.45973206 162.28717041]
[122.06901550 147.67543030]
[118.67829132 133.06369019]
[115.28756714 118.45195007]
[99.09506226 122.76494598]
[84.94005585 115.48930359]
[79.62248230 101.38449860]
[84.84103394 88.14307404]
[77.56150818 75.02787781]
[70.28197479 61.91267776]
[63.00244904 48.79747772]
[55.72291946 35.68227768]
[40.79437637 31.23521805]
[33.59872818 17.83084106]
[37.93032074 3.62616205]
[30.65079308 -9.48903751]
[23.37126350 -22.60423660]
[16.09173393 -35.71943665]
[8.81220436 -48.83463669]
[1.53267515 -61.94983292]
[-13.85267544 -64.74715424]
[-23.80062103 -76.81249237]
[-23.61404610 -92.44896698]
[-13.38104439 -104.27350616]
[2.06667113 -106.70292664]
[15.43516350 -98.59013367]
[20.41223907 -83.76573944]
[14.64787388 -69.22936249]
[21.92740440 -56.11416245]
[29.20693398 -42.99896622]
[36.48646164 -29.88376617]
[43.76599121 -16.76856613]
[51.04552078 -3.65336728]
[65.39149475 0.18441436]
[72.96080780 13.38139153]
[68.83811951 28.40275002]
[76.11764526 41.51794815]
[83.39717865 54.63314819]
[90.67670441 67.74834442]
[97.95623779 80.86354828]
[110.98526764 81.39773560]
[122.09348297 90.72302246]
[131.86407471 79.34165192]
[141.63465881 67.96028137]
[151.40524292 56.57890701]
[161.17582703 45.19753647]
[166.90530396 29.24104691]
[183.82427979 30.32940674]
[187.46208191 46.88847351]
[172.55720520 54.96812439]
[162.78662109 66.34949493]
[153.01602173 77.73086548]
[143.24543762 89.11223602]
[133.47485352 100.49360657]
[129.89930725 115.06122589]
[133.29003906 129.67297363]
[136.68075562 144.28471375]
[140.07147217 158.89645386]
[143.46220398 173.50819397]
[146.85292053 188.11993408]
[150.24363708 202.73168945]
[153.63435364 217.34342957]
[157.02508545 231.95516968]
[160.41580200 246.56690979]
[163.80651855 261.17864990]
[167.53881836 265.15097046]
[169.13281250 269.71197510]
[168.73451233 273.91732788]
[166.85491943 277.02798462]
[169.12634277 291.85501099]
[171.39775085 306.68203735]
[173.66917419 321.50906372]
[175.94058228 336.33605957]
[181.66337585 343.29827881]
[181.71916199 351.35183716]
[189.97354126 363.87643433]
[198.22793579 376.40100098]
[206.48233032 388.92556763]
[214.73672485 401.45016479]
[222.99110413 413.97473145]
[231.24549866 426.49929810]
[239.49989319 439.02389526]
[254.39601135 445.88229370]
[255.63487244 462.23458862]
[241.94204712 471.25891113]
[227.40353394 463.67181396]
[226.97531128 447.27825928]
[218.72091675 434.75369263]
[210.46653748 422.22912598]
[202.21214294 409.70452881]
[193.95774841 397.17996216]
[185.70335388 384.65539551]
[177.44897461 372.13079834]
[169.19458008 359.60623169]
[168.94309998 374.60412598]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 101]
[18 100]
[19 99]
[20 98]
[21 97]
[22 93]
[23 92]
[24 91]
[25 90]
[26 89]
[27 88]
[28 87]
[29 86]
[30 85]
[31 84]
[32 83]
[36 68]
[37 67]
[38 66]
[39 65]
[40 64]
[43 61]
[44 60]
[45 59]
[46 58]
[47 57]
[48 56]
[70 82]
[71 81]
[72 80]
[73 79]
[74 78]
[103 122]
[104 121]
[105 120]
[106 119]
[107 118]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
