%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon May  4 01:45:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
aaaagaguugauuuuuguggaaagggcuaucaucuuauguccuucccucagucagcaccucaugguguagucuucuu\
) } def
/len { sequence length } bind def

/coor [
[95.70349121 269.62817383]
[80.34037781 274.24926758]
[67.23126221 265.00097656]
[66.43232727 248.97782898]
[78.55644989 238.47140503]
[80.96262360 223.66564941]
[83.36878967 208.85989380]
[74.48130798 196.96249390]
[76.71058655 181.91307068]
[89.24993896 172.67172241]
[91.65610504 157.86596680]
[94.06227875 143.06022644]
[96.46844482 128.25447083]
[76.52645111 108.74407959]
[83.93358612 85.52664185]
[76.96273804 72.24479675]
[69.99188995 58.96295929]
[56.72758865 50.33921814]
[57.66397095 35.47407532]
[50.69312286 22.19223404]
[37.42882156 13.56849098]
[38.36520386 -1.29665172]
[31.39435577 -14.57849216]
[24.42350960 -27.86033249]
[17.45266151 -41.14217377]
[10.48181343 -54.42401505]
[3.51096630 -67.70585632]
[-11.79440880 -67.64207458]
[-25.37093735 -74.70864868]
[-34.09882736 -87.28173065]
[-35.97248077 -102.47212219]
[-30.56134033 -116.78918457]
[-19.10885048 -126.94295502]
[-4.24670506 -130.60017395]
[10.60988045 -126.92043304]
[22.04697227 -116.74932098]
[27.43641090 -102.42407990]
[25.53974152 -87.23654938]
[16.79280663 -74.67670441]
[23.76365471 -61.39485931]
[30.73450279 -48.11302185]
[37.70534897 -34.83118057]
[44.67619705 -21.54933929]
[51.64704514 -8.26749897]
[64.41274261 -0.59376246]
[63.97496414 15.22138596]
[70.94580841 28.50322723]
[83.71150970 36.17696381]
[83.27372742 51.99211121]
[90.24457550 65.27394867]
[97.21542358 78.55579376]
[108.34001160 78.20439148]
[118.98413849 83.65775299]
[126.13897705 94.25998688]
[127.37777710 107.82585144]
[141.94190979 111.41558838]
[156.50602722 115.00531769]
[171.07015991 118.59505463]
[185.63429260 122.18479156]
[201.22685242 117.10502625]
[213.23977661 128.26841736]
[209.31521606 144.19104004]
[193.49040222 148.49305725]
[182.04455566 136.74891663]
[167.48042297 133.15917969]
[152.91629028 129.56944275]
[138.35217285 125.97971344]
[123.78804016 122.38997650]
[111.27420044 130.66062927]
[108.86803436 145.46638489]
[106.46186066 160.27214050]
[104.05569458 175.07789612]
[113.02328491 187.81445312]
[110.37217712 202.79531860]
[98.17454529 211.26606750]
[95.76837158 226.07180786]
[93.36220551 240.87756348]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 77]
[6 76]
[7 75]
[10 72]
[11 71]
[12 70]
[13 69]
[15 51]
[16 50]
[17 49]
[19 47]
[20 46]
[22 44]
[23 43]
[24 42]
[25 41]
[26 40]
[27 39]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
