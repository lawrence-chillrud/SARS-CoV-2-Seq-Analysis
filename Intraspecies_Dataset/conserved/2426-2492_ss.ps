%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon May  4 01:45:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
aucaaaaccaagcaagaggucauuuauugaagaucuacuuuucaacaaagugacacuugcagaugcu\
) } def
/len { sequence length } bind def

/coor [
[82.89323425 272.85739136]
[67.78663635 272.32626343]
[53.50828552 267.36441040]
[41.32780075 258.41302490]
[32.32826233 246.26808167]
[27.30990601 232.00949097]
[26.71895790 216.90510559]
[30.60796547 202.29801941]
[38.63112259 189.48707581]
[50.07501221 179.61140442]
[63.92205429 173.54916382]
[78.94097900 171.83938599]
[81.69721985 157.09478760]
[84.45346069 142.35018921]
[87.20970917 127.60559845]
[89.96595001 112.86100006]
[83.90708923 102.66564178]
[86.35501099 91.06121826]
[96.01573944 84.18187714]
[99.44999695 69.58029938]
[102.88425446 54.97873306]
[106.31851196 40.37716293]
[109.75276947 25.77559090]
[113.18702698 11.17401981]
[116.62129211 -3.42755127]
[110.81457520 -20.73253250]
[122.94621277 -33.20656586]
[125.70245361 -47.95116425]
[128.45869446 -62.69575882]
[131.21493530 -77.44035339]
[133.97119141 -92.18495178]
[136.72743225 -106.92955017]
[139.48367310 -121.67414856]
[131.63987732 -135.66894531]
[137.82414246 -150.47213745]
[153.29241943 -154.72798157]
[166.17875671 -145.17175293]
[166.59788513 -129.13417053]
[154.22827148 -118.91790009]
[151.47203064 -104.17330933]
[148.71577454 -89.42871094]
[145.95953369 -74.68411255]
[143.20329285 -59.93951797]
[140.44705200 -45.19491959]
[137.69081116 -30.45032501]
[144.33044434 -20.08465004]
[141.91261292 -7.60137081]
[131.22285461 0.00670694]
[127.78860474 14.60827732]
[124.35433960 29.20984840]
[120.92008209 43.81142044]
[117.48582458 58.41299057]
[114.05156708 73.01456451]
[110.61730957 87.61613464]
[115.96092987 103.36692047]
[104.71054840 115.61724091]
[101.95429993 130.36183167]
[99.19805908 145.10643005]
[96.44181824 159.85102844]
[93.68557739 174.59562683]
[107.07266235 181.61540222]
[117.79470825 192.27041626]
[124.89831543 205.61320496]
[127.75183868 220.45735168]
[126.10153961 235.48294067]
[120.09416962 249.35386658]
[110.26389313 260.83676147]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 60]
[13 59]
[14 58]
[15 57]
[16 56]
[19 54]
[20 53]
[21 52]
[22 51]
[23 50]
[24 49]
[25 48]
[27 45]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
[33 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
