%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon May  4 01:45:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ggguacaaucacuucugguuggaccuuuggugcaggugcugcauuacaaauaccauuugcuaugcaaauggcuuau\
) } def
/len { sequence length } bind def

/coor [
[71.25318909 122.98216248]
[57.87422562 129.76473999]
[44.49526215 136.54731750]
[31.11630058 143.32989502]
[22.30609131 156.47108459]
[7.45565510 155.32485962]
[-5.92330694 162.10745239]
[-19.30226898 168.89002991]
[-32.68123245 175.67260742]
[-46.06019211 182.45518494]
[-59.43915558 189.23776245]
[-67.94074249 203.26113892]
[-84.32810974 202.63977051]
[-91.74334717 188.01286316]
[-82.55828857 174.42732239]
[-66.22173309 175.85879517]
[-52.84277344 169.07621765]
[-39.46380997 162.29364014]
[-26.08484840 155.51106262]
[-12.70588589 148.72848511]
[0.67307663 141.94590759]
[8.52633286 129.28985596]
[24.33372116 129.95094299]
[37.71268463 123.16835785]
[51.09164429 116.38578033]
[64.47061157 109.60320282]
[67.51937866 82.69195557]
[88.15679932 65.15322113]
[86.32538605 50.26544571]
[84.49397278 35.37766647]
[82.66255951 20.48989105]
[80.83114624 5.60211277]
[78.99972534 -9.28566456]
[77.16831207 -24.17344284]
[75.33689880 -39.06121826]
[67.40192413 -54.04362869]
[79.60219574 -65.81604004]
[94.29190826 -57.35149002]
[90.22467804 -40.89263535]
[92.05609131 -26.00485802]
[93.88750458 -11.11707973]
[95.71891785 3.77069783]
[97.55033875 18.65847588]
[99.38175201 33.54625320]
[101.21316528 48.43402863]
[103.04457855 63.32180786]
[111.42401123 65.01355743]
[119.18713379 68.59278870]
[125.91513062 73.86640167]
[131.24504089 80.54988861]
[134.88931274 88.28269196]
[136.65133667 96.64762878]
[136.43608093 105.19342041]
[150.54306030 110.29176331]
[164.65003967 115.39009857]
[178.75701904 120.48844147]
[192.86399841 125.58677673]
[206.97097778 130.68511963]
[221.07797241 135.78346252]
[235.18495178 140.88179016]
[252.13618469 140.57897949]
[257.11975098 156.78392029]
[242.92767334 166.05870056]
[230.08660889 154.98878479]
[215.97962952 149.89044189]
[201.87265015 144.79209900]
[187.76567078 139.69375610]
[173.65867615 134.59541321]
[159.55169678 129.49708557]
[145.44471741 124.39874268]
[131.33773804 119.30039978]
[124.95731354 127.04979706]
[116.72036743 132.78701782]
[107.23962402 136.08528137]
[97.22034454 136.69921875]
[87.40783691 134.58319092]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 26]
[2 25]
[3 24]
[4 23]
[6 21]
[7 20]
[8 19]
[9 18]
[10 17]
[11 16]
[28 46]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[53 71]
[54 70]
[55 69]
[56 68]
[57 67]
[58 66]
[59 65]
[60 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
