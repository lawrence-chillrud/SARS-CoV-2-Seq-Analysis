%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon May  4 01:45:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ugcuauucaugcagaucaacuuacuccuacuuggcguguuuauucuacagguucuaauguuuuucaaacacgugcaggcuguuua\
) } def
/len { sequence length } bind def

/coor [
[-8.95750237 240.43569946]
[-16.29876900 253.51643372]
[-23.64003754 266.59716797]
[-17.94425583 281.16055298]
[-22.99115181 295.96133423]
[-36.39773560 304.01101685]
[-51.83382797 301.50881958]
[-62.01097870 289.63616943]
[-62.12384796 273.99899292]
[-52.11914444 261.98068237]
[-36.72077942 259.25592041]
[-29.37951088 246.17517090]
[-22.03824425 233.09443665]
[-31.06610298 225.16105652]
[-38.45320511 215.67485046]
[-43.93722916 204.96974182]
[-47.32287598 193.42297363]
[-48.48883438 181.44184875]
[-47.39212418 169.44931030]
[-44.06967163 157.86906433]
[-38.63706970 147.11062622]
[-31.28456879 137.55474854]
[-22.27040100 129.54002380]
[-11.91171551 123.35087585]
[-0.57342547 119.20743561]
[11.34465504 117.25774384]
[23.42190361 117.57245636]
[35.23173904 120.14226532]
[46.35668564 124.87817383]
[56.40312576 131.61460876]
[67.20167542 121.20349121]
[78.00022888 110.79238129]
[88.79878235 100.38127136]
[99.40538025 89.77466583]
[109.81649780 78.97611237]
[120.22760773 68.17756653]
[130.63871765 57.37900925]
[141.04983521 46.58045959]
[151.46095276 35.78190613]
[161.87205505 24.98335457]
[172.28317261 14.18480206]
[167.07006836 -0.11851455]
[168.57797241 -15.20536995]
[176.45451355 -28.08870316]
[189.09172058 -36.24111938]
[203.95405579 -38.09064102]
[218.08700562 -33.32357788]
[228.49812317 -44.12213135]
[238.90924072 -54.92068100]
[236.06982422 -70.17575836]
[242.76977539 -84.17183685]
[256.43283081 -91.52713776]
[271.80526733 -89.41339874]
[282.97607422 -78.64340210]
[285.64981079 -63.35842133]
[278.79843140 -49.43584824]
[265.05639648 -42.22919464]
[249.70779419 -44.50957108]
[239.29667664 -33.71101761]
[228.88555908 -22.91246605]
[234.16560364 -8.96303558]
[232.86012268 5.95692205]
[225.17468262 18.88344574]
[212.58761597 27.22525597]
[197.56588745 29.28315926]
[183.08172607 24.59591484]
[172.67060852 35.39446640]
[162.25950623 46.19301987]
[151.84838867 56.99157333]
[141.43727112 67.79012299]
[131.02615356 78.58867645]
[120.61505127 89.38722992]
[110.20393372 100.18578339]
[107.22742462 107.89917755]
[99.20989227 111.17982483]
[88.41133881 121.59093475]
[77.61279297 132.00204468]
[66.81423950 142.41316223]
[75.78803253 158.74235535]
[79.70459747 176.94418335]
[78.24349976 195.49105835]
[71.53527069 212.82878113]
[60.14982224 227.50679016]
[45.04800415 238.29957581]
[27.50053787 244.30889893]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 13]
[2 12]
[3 11]
[30 78]
[31 77]
[32 76]
[33 75]
[34 73]
[35 72]
[36 71]
[37 70]
[38 69]
[39 68]
[40 67]
[41 66]
[47 60]
[48 59]
[49 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
