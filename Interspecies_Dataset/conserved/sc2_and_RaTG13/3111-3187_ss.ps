%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun May  3 21:02:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAGAGUUGAUUUUUGUGGAAAGGGCUAUCAUCUUAUGUCCUUCCCUCAGUCAGCACCUCAUGGUGUAGUCUUCUU\
) } def
/len { sequence length } bind def

/coor [
[62.75242615 216.72581482]
[57.46492767 202.68864441]
[56.60991669 187.71302795]
[60.26539612 173.16526794]
[68.09786224 160.37258911]
[79.39273071 150.50213623]
[93.11952972 144.45440674]
[108.02591705 142.78117371]
[122.75337982 145.63560486]
[114.23241425 133.29084778]
[105.71144104 120.94609070]
[97.19046783 108.60133362]
[93.20903015 107.34898376]
[89.87865448 104.21496582]
[88.08597565 99.57519531]
[88.49331665 94.21449280]
[81.52246857 80.93265533]
[68.25817108 72.30890656]
[69.19455719 57.44376755]
[62.22370529 44.16192627]
[48.95940781 35.53818512]
[49.89579010 20.67304039]
[42.92494202 7.39120054]
[35.95409393 -5.89063978]
[28.98324585 -19.17247963]
[22.01239777 -32.45431900]
[15.04155064 -45.73616028]
[-0.26382479 -45.67237854]
[-13.84035206 -52.73895645]
[-22.56824493 -65.31204224]
[-24.44189644 -80.50243378]
[-19.03075600 -94.81948853]
[-7.57826519 -104.97325897]
[7.28387928 -108.63047791]
[22.14046478 -104.95074463]
[33.57755661 -94.77963257]
[38.96699524 -80.45439148]
[37.07032776 -65.26685333]
[28.32339096 -52.70700836]
[35.29423904 -39.42516708]
[42.26508713 -26.14332771]
[49.23593521 -12.86148739]
[56.20677948 0.42035317]
[63.17762756 13.70219326]
[75.94332886 21.37593079]
[75.50554657 37.19107819]
[82.47639465 50.47291946]
[95.24208832 58.14665604]
[94.80431366 73.96180725]
[101.77516174 87.24364471]
[109.53522491 100.08036041]
[118.05619812 112.42512512]
[126.57717133 124.76988220]
[135.09814453 137.11463928]
[147.44290161 145.63560486]
[162.00701904 149.22534180]
[176.57115173 152.81507874]
[191.13528442 156.40481567]
[205.69940186 159.99455261]
[221.29197693 154.91477966]
[233.30490112 166.07818604]
[229.38032532 182.00079346]
[213.55551147 186.30281067]
[202.10968018 174.55867004]
[187.54554749 170.96894836]
[172.98141479 167.37921143]
[158.41729736 163.78947449]
[143.85316467 160.19973755]
[151.74392700 172.95652771]
[155.46575928 187.48745728]
[154.67909241 202.46682739]
[149.45571899 216.52798462]
[140.27215576 228.38809204]
[127.96627808 236.96511841]
[113.66078949 241.47654724]
[98.66082764 241.51077271]
[84.33489990 237.06468201]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 54]
[10 53]
[11 52]
[12 51]
[16 50]
[17 49]
[19 47]
[20 46]
[22 44]
[23 43]
[24 42]
[25 41]
[26 40]
[27 39]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
