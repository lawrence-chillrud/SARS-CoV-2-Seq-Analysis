%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun May  3 21:02:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUAAAAUGGCCAUGGUACAUUUGGCUAGGUUUUAUAGCUGGCUUGAUUGCCAUAGUAAUGGUGACAAUUAUGCUUUGCUGUAUGACCAG\
) } def
/len { sequence length } bind def

/coor [
[12.40142822 240.69259644]
[6.48128700 254.47489929]
[-5.03319502 264.08825684]
[-19.65096283 267.45291138]
[-34.20959091 263.84094238]
[-45.55945206 254.03376770]
[-51.24510193 240.15309143]
[-50.03650284 225.20185852]
[-42.19731522 212.41683960]
[-56.64107513 216.46379089]
[-71.08483124 220.51074219]
[-85.52859497 224.55769348]
[-99.97235107 228.60464478]
[-114.41610718 232.65159607]
[-118.84757233 247.42880249]
[-130.57955933 257.44699097]
[-145.86845398 259.50936890]
[-159.83560181 252.95787048]
[-168.02415466 239.88304138]
[-167.82116699 224.45701599]
[-159.29141235 211.60217285]
[-145.15670776 205.42045593]
[-129.92738342 207.88442993]
[-118.46305847 218.20783997]
[-104.01930237 214.16088867]
[-89.57554626 210.11393738]
[-75.13178253 206.06698608]
[-60.68802643 202.02003479]
[-46.24426651 197.97308350]
[-32.81010818 191.30049133]
[-20.85803032 182.23695374]
[-8.90595436 173.17340088]
[3.04612207 164.10986328]
[8.51211929 150.25445557]
[24.18332481 148.08100891]
[36.13540268 139.01745605]
[48.08747864 129.95391846]
[60.03955460 120.89037323]
[71.99163055 111.82682800]
[83.94371033 102.76328278]
[89.93537140 87.18814850]
[106.48626709 85.05448151]
[118.12194061 75.58816528]
[129.75761414 66.12184143]
[135.57963562 51.41080856]
[150.33525085 49.38069534]
[161.97091675 39.91437531]
[173.60658264 30.44805527]
[185.24224854 20.98173523]
[196.87792969 11.51541710]
[208.51359558 2.04909778]
[219.64933777 -8.00054359]
[230.25593567 -18.60714531]
[240.86253357 -29.21374702]
[251.46914673 -39.82034683]
[255.18859863 -55.79212570]
[270.95675659 -60.29732132]
[282.55270386 -48.70137024]
[278.04751587 -32.93320084]
[262.07574463 -29.21374702]
[251.46914673 -18.60714531]
[240.86253357 -8.00054359]
[230.25593567 2.60605836]
[229.96682739 6.32249451]
[227.72549438 10.05290794]
[223.56300354 12.81412888]
[217.97991943 13.68476677]
[206.34423828 23.15108681]
[194.70857239 32.61740494]
[183.07290649 42.08372498]
[171.43724060 51.55004501]
[159.80155945 61.01636124]
[154.81179810 75.05030060]
[139.22392273 77.75751495]
[127.58825684 87.22383118]
[115.95259094 96.69015503]
[114.01508331 108.30768585]
[104.75319672 115.58355713]
[93.00725555 114.71535492]
[81.05517578 123.77890015]
[69.10310364 132.84245300]
[57.15102386 141.90599060]
[45.19894791 150.96954346]
[33.24687195 160.03308105]
[26.92598152 174.53677368]
[12.10966778 176.06193542]
[0.15759128 185.12547302]
[-11.79448509 194.18902588]
[-23.74656296 203.25256348]
[-8.81974220 204.73245239]
[3.82297802 212.80473328]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 29]
[10 28]
[11 27]
[12 26]
[13 25]
[14 24]
[30 89]
[31 88]
[32 87]
[33 86]
[35 84]
[36 83]
[37 82]
[38 81]
[39 80]
[40 79]
[42 76]
[43 75]
[44 74]
[46 72]
[47 71]
[48 70]
[49 69]
[50 68]
[51 67]
[52 63]
[53 62]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
