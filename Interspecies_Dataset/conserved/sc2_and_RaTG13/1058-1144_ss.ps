%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun May  3 21:02:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACAGGAAGAGAAUCAGCAACUGUGUUGCUGAUUAUUCUGUCCUAUAUAAUUCCGCAUCAUUUUCCACUUUUAAGUGUUAUGGAGU\
) } def
/len { sequence length } bind def

/coor [
[107.74829865 132.51199341]
[92.89553070 132.65872192]
[79.44593048 126.35519409]
[70.05586243 114.84636688]
[66.57991791 100.40531158]
[51.92271805 97.21683502]
[37.26551437 94.02835846]
[22.60831070 90.83987427]
[7.89653158 87.91352081]
[-6.86513662 85.25022125]
[-21.62680435 82.58692169]
[-36.38847351 79.92362976]
[-51.19532776 77.52423096]
[-66.04264832 75.38951111]
[-80.88996887 73.25479126]
[-95.73728943 71.12006378]
[-110.58460999 68.98534393]
[-125.43193817 66.85062408]
[-140.27925110 64.71589661]
[-155.12657166 62.58117676]
[-169.97389221 60.44645309]
[-184.82122803 58.31172943]
[-201.35961914 62.04238510]
[-209.52276611 47.18306351]
[-197.50392151 35.22546768]
[-182.68649292 43.46440887]
[-167.83917236 45.59913254]
[-152.99185181 47.73385620]
[-138.14453125 49.86857605]
[-123.29721069 52.00329971]
[-108.44989014 54.13802338]
[-93.60256958 56.27274323]
[-78.75524902 58.40746689]
[-63.90792465 60.54219055]
[-49.06060410 62.67691422]
[-41.82881546 60.46197510]
[-33.72517395 65.16195679]
[-18.96350670 67.82525635]
[-4.20183849 70.48855591]
[10.55982971 73.15185547]
[17.86606407 71.19644165]
[25.79678917 76.18267059]
[40.45399475 79.37115479]
[55.11119461 82.55963135]
[69.76840210 85.74810791]
[78.92926025 74.05602264]
[92.25170135 67.48800659]
[107.10446930 67.34127045]
[120.55406952 73.64480591]
[129.94413757 85.15363312]
[133.42007446 99.59468842]
[148.07728577 102.78316498]
[162.73448181 105.97164154]
[177.39169312 109.16012573]
[192.04888916 112.34860229]
[206.70610046 115.53708649]
[218.29006958 105.38239288]
[233.45498657 104.01185608]
[246.36636353 111.74234009]
[252.18034363 125.42940521]
[266.83755493 128.61787415]
[281.49475098 131.80636597]
[296.15194702 134.99484253]
[310.80917358 138.18331909]
[321.64498901 127.20205688]
[336.70260620 123.84462738]
[351.17712402 129.18237305]
[360.44982910 141.51205444]
[361.56179810 156.89929199]
[354.15820312 170.43408203]
[340.60156250 177.79753113]
[325.21768188 176.63996887]
[312.91552734 167.33079529]
[307.62066650 152.84051514]
[292.96347046 149.65203857]
[278.30627441 146.46356201]
[263.64907837 143.27508545]
[248.99186707 140.08660889]
[238.01747131 150.12158203]
[223.06152344 151.78990173]
[209.83634949 144.24346924]
[203.51760864 130.19429016]
[188.86041260 127.00580597]
[174.20321655 123.81732941]
[159.54600525 120.62884521]
[144.88880920 117.44036865]
[130.23159790 114.25189209]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 45]
[6 44]
[7 43]
[8 42]
[9 40]
[10 39]
[11 38]
[12 37]
[13 35]
[14 34]
[15 33]
[16 32]
[17 31]
[18 30]
[19 29]
[20 28]
[21 27]
[22 26]
[51 87]
[52 86]
[53 85]
[54 84]
[55 83]
[56 82]
[60 78]
[61 77]
[62 76]
[63 75]
[64 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
