%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun May  3 21:02:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACAGACAACACAUUUGUGUCUGGUAACUGUGAUGUUGUAAUAGGAAUUGUCAACAACACAGUUUAU\
) } def
/len { sequence length } bind def

/coor [
[96.78824615 125.64216614]
[87.25653076 122.48199463]
[79.64902496 115.92714691]
[65.66194153 121.34577179]
[51.67485809 126.76439667]
[37.68777466 132.18301392]
[23.70069122 137.60163879]
[9.71360874 143.02026367]
[2.55273890 149.24237061]
[-5.04665565 148.34970093]
[-19.26906586 153.11657715]
[-29.71781731 165.75602722]
[-45.84104538 162.76042175]
[-51.05255127 147.21139526]
[-39.99118805 135.10444641]
[-24.03593636 138.89416504]
[-9.81352711 134.12728882]
[4.29498339 129.03318787]
[18.28206635 123.61456299]
[32.26914978 118.19593811]
[46.25623322 112.77731323]
[60.24331665 107.35868835]
[74.23040009 101.94006348]
[80.47209930 83.07376862]
[98.26076508 74.21606445]
[117.07785797 80.60456085]
[129.83111572 72.70808411]
[142.58436584 64.81159973]
[155.33763123 56.91511536]
[168.09088135 49.01863480]
[180.84414673 41.12215042]
[193.59739685 33.22566986]
[201.25737000 19.38242912]
[216.15148926 19.26076889]
[228.90473938 11.36428642]
[241.65800476 3.46780443]
[254.41125488 -4.42867804]
[267.16452026 -12.32516098]
[279.73196411 -20.51411057]
[292.10693359 -28.99115562]
[304.48190308 -37.46820068]
[316.85687256 -45.94524765]
[323.44778442 -60.96162796]
[339.77529907 -62.49271774]
[349.04306030 -48.96346283]
[341.71719360 -34.29160309]
[325.33392334 -33.57028580]
[312.95895386 -25.09324074]
[300.58398438 -16.61619377]
[288.20901489 -8.13914776]
[284.34173584 -1.53674448]
[275.06100464 0.42809650]
[262.30773926 8.32457924]
[249.55448914 16.22106171]
[236.80122375 24.11754417]
[224.04797363 32.01402664]
[217.30018616 45.29245758]
[201.49388123 45.97892761]
[188.74061584 53.87540817]
[175.98736572 61.77189255]
[163.23411560 69.66837311]
[150.48085022 77.56485748]
[137.72760010 85.46134186]
[124.97433472 93.35781860]
[125.62067413 103.37892151]
[122.39840698 112.88982391]
[115.79408264 120.45441437]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 23]
[4 22]
[5 21]
[6 20]
[7 19]
[8 18]
[10 17]
[11 16]
[26 64]
[27 63]
[28 62]
[29 61]
[30 60]
[31 59]
[32 58]
[34 56]
[35 55]
[36 54]
[37 53]
[38 52]
[39 50]
[40 49]
[41 48]
[42 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
