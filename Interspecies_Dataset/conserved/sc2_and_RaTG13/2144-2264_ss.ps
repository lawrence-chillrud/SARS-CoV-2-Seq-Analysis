%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun May  3 21:02:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAAAUUUUACUAUUAGUGUUACCACAGAAAUUCUACCAGUGUCUAUGACCAAGACAUCAGUAGAUUGUACAAUGUACAUUUGUGGUGAUUCAACUGAAUGCAGCAAUCUUUUGUUGCAA\
) } def
/len { sequence length } bind def

/coor [
[167.31053162 396.28292847]
[154.33566284 403.80969238]
[139.59494019 406.58663940]
[124.77075195 404.29681396]
[111.55496979 397.20150757]
[101.45590210 386.11059570]
[95.62615967 372.28979492]
[94.73109436 357.31652832]
[98.87285614 342.89965820]
[107.57874298 330.68460083]
[119.85515594 322.06546021]
[134.30099487 318.02593994]
[149.26754761 319.02703857]
[163.04669189 324.95452881]
[174.06735229 335.13391113]
[170.99906921 320.45108032]
[167.93078613 305.76824951]
[164.86251831 291.08541870]
[161.79423523 276.40258789]
[158.16123962 261.84918213]
[153.96894836 247.44692993]
[149.77667236 233.04469299]
[145.58438110 218.64244080]
[141.39210510 204.24018860]
[137.19981384 189.83793640]
[133.00753784 175.43569946]
[128.81524658 161.03344727]
[124.62296295 146.63119507]
[120.43067932 132.22895813]
[116.23839569 117.82670593]
[100.22461700 122.92377472]
[85.68058014 116.35250092]
[79.60720062 102.51229858]
[84.09375763 88.96713257]
[76.04331970 76.31050110]
[67.99287415 63.65386963]
[59.94243240 50.99723434]
[51.89198685 38.34060287]
[36.72432327 34.79380798]
[28.74032974 21.84350014]
[32.21512604 7.40530872]
[24.16468430 -5.25132465]
[16.11424255 -17.90795898]
[8.06379890 -30.56459236]
[0.01335627 -43.22122574]
[-8.03708649 -55.87785721]
[-23.56213188 -57.75055695]
[-34.21346664 -69.19970703]
[-34.96185684 -84.81937408]
[-25.45393562 -97.23442078]
[-10.17905235 -100.58285522]
[3.65045953 -93.28363037]
[9.50472832 -78.78323364]
[4.61954689 -63.92830276]
[12.66998959 -51.27166748]
[20.72043228 -38.61503601]
[28.77087593 -25.95840073]
[36.82131958 -13.30176735]
[44.87176132 -0.64513421]
[59.42148209 2.32828975]
[67.76607513 15.04923439]
[64.54862213 30.29015732]
[72.59906769 42.94679260]
[80.64950562 55.60342407]
[88.69995117 68.26005554]
[96.75039673 80.91669464]
[110.00247955 80.70231628]
[121.75782776 89.60415649]
[131.06697083 77.84235382]
[140.37611389 66.08055878]
[149.68525696 54.31876373]
[158.99440002 42.55696487]
[164.08325195 26.38477135]
[181.03216553 26.79784966]
[185.32716370 43.19874573]
[170.75619507 51.86610794]
[161.44705200 63.62790298]
[152.13790894 75.38970184]
[142.82876587 87.15149689]
[133.51962280 98.91329193]
[130.64064026 113.63441467]
[134.83293152 128.03666687]
[139.02520752 142.43891907]
[143.21749878 156.84115601]
[147.40977478 171.24340820]
[151.60206604 185.64566040]
[155.79434204 200.04791260]
[159.98663330 214.45014954]
[164.17890930 228.85240173]
[168.37120056 243.25465393]
[172.56349182 257.65689087]
[176.51649475 261.42315674]
[178.36048889 265.89718628]
[178.18992615 270.12387085]
[176.47706604 273.33428955]
[179.54534912 288.01712036]
[182.61363220 302.69998169]
[185.68191528 317.38281250]
[188.75018311 332.06564331]
[195.07290649 339.07919312]
[195.25653076 347.49169922]
[203.63018799 359.93685913]
[212.00384521 372.38201904]
[220.37750244 384.82714844]
[228.75115967 397.27230835]
[237.12480164 409.71746826]
[245.49845886 422.16262817]
[253.87211609 434.60778809]
[268.83306885 441.32357788]
[270.22808838 457.66329956]
[256.62210083 466.81802368]
[242.01176453 459.37014771]
[241.42697144 442.98144531]
[233.05331421 430.53628540]
[224.67965698 418.09112549]
[216.30599976 405.64596558]
[207.93234253 393.20080566]
[199.55868530 380.75564575]
[191.18502808 368.31051636]
[182.81137085 355.86535645]
[182.41004944 370.85998535]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 99]
[16 98]
[17 97]
[18 96]
[19 95]
[20 91]
[21 90]
[22 89]
[23 88]
[24 87]
[25 86]
[26 85]
[27 84]
[28 83]
[29 82]
[30 81]
[34 66]
[35 65]
[36 64]
[37 63]
[38 62]
[41 59]
[42 58]
[43 57]
[44 56]
[45 55]
[46 54]
[68 80]
[69 79]
[70 78]
[71 77]
[72 76]
[101 120]
[102 119]
[103 118]
[104 117]
[105 116]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
